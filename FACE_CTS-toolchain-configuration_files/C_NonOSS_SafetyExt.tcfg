pathdirs: "/usr/bin"
toolchain_segment_type: NON_OSS_TOOLCHAIN
profiles: PROF_SAFETY_EXT
toolchain_specific_config {
  allowed_definitions {
    heading_code: "/*\n *   Profile specific MACROs\n */\n#if !defined (FACE_GENERAL_PURPOSE_PROFILE) && !defined(FACE_SAFETY_EXTENDED_PROFILE) && !defined(FACE_SAFETY_BASE_PROFILE) && !defined(FACE_SECURITY_PROFILE)  \n#error \"No FACE profile defined\"\n#endif\n\n#if defined(__GNUC__)\n\n/*\n*   Function stub for _start() to compensate for -nodefaultlibs -nostartfiles.\n*   Without the stub, linker gives \"warning: cannot find entry symbol _start; \n*   defaulting to 0000000000400144\"\n*/\nvoid _start() {}\n\n/*\n * This is invoked by GCC when stack checking is enabled.\n */\nvoid __stack_chk_fail(void)\n{\n}\n\n  #if defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__)\n    /*\n     *  This symbol is implicitly generated by GCC on some platforms.\n     *  It initializes the run-time and may invoke global constructors.\n     */\n     void * __main();\n  #endif\n\n\n/*\n * Integer Arithmetic Functions in GCC low-level runtime library that a target processor cannot perform directly.\n * c99 - always allows long long\n */\n#if defined(ALLOWABLE_USE_OF_LONG_LONG)\n// GCC Internals - 4.1.1 Arithmetic Functions\nvoid __lshrdi3() { }\nvoid __ashrdi3() { }\nvoid __ashldi3() { }\nvoid __muldi3() { }\nvoid __divdi3() { }\nvoid __moddi3() { }\nvoid __udivdi3() { }\nvoid __umoddi3() { }\n\n// GCC Internals - 4.1.3 Trapping Arithmetic Functions\nvoid __addvdi3() { }\nvoid __subvdi3() { }\nvoid __mulvdi3() { }\nvoid __negdi2() { }\nvoid __udivmoddi4() { }\n#endif /*ALLOWABLE_USE_OF_LONG_LONG*/\n\n\n#else\n  #error \"Compiler is unknown. Please add Compiler Specific support.\"\n#endif  /* __GNUC__ */\n"
    source_code: "#if defined(__GNUC__)\n  #if defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__)\n    void * __main() { }\n  #endif\n#endif  /* __GNUC__ */\n"
  }
  exact_types {
    FACE_int8_t: "char"
    FACE_int16_t: "short int"
    FACE_int32_t: "int"
    FACE_int64_t: "long int"
    FACE_uint8_t: "unsigned char"
    FACE_uint16_t: "unsigned short int"
    FACE_uint32_t: "unsigned int"
    FACE_uint64_t: "long unsigned int"
    FACE_size_t: "long unsigned int"
    FACE_SUPPORTS_64_BIT: true
  }
  face_null_definition: "#ifdef __cplusplus\n  // Define NULL for C++ as the constant 0 with no specific type.\n  #define FACE_NULL 0\n#else\n  // Define NULL for C as 0 cast to a void pointer.\n  #define FACE_NULL ( (void*) 0 )\n#endif"
}
operating_system: "Sys: [Linux], Release: [5.10.0-0.bpo.12-amd64], Version: [#1 SMP Debian 5.10.103-1~bpo10+1 (2022-03-08)], Arch: [64 bits]"
file_extensions {
  obj: "o"
  src: "c"
  hdr: "h"
  lib: "a"
}
compiler {
  exe: "gcc"
  flags: "-nostdinc -D_XOPEN_SOURCE=700 -D__USE_SVID -D_GNU_SOURCE -DFACE_SAFETY_EXTENDED_PROFILE -std=c99 -c -fno-builtin"
  output_flag: "-o"
}
linker {
  exe: "gcc"
  flags: "-nodefaultlibs -nostartfiles -O0"
  output_flag: "-o"
}
archiver {
  exe: "ar"
  flags: "cr"
}
binder {
}
toolchain_template: "/home/face/FACEConformanceTestSuite/datafiles/stringtemplate/defaultC++CToolchainTemplates.stg"
