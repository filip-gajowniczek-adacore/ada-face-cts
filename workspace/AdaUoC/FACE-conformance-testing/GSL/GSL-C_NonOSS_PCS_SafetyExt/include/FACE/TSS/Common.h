/** 
* Note:  This file is was generated by the GTRI IDL Compiler.
* This file should not be edited directly, if errors are found,
* please contact the individual listed below.
* 
* Developer:  Marcus Quettan
* Email: marcus.quettan@gtri.gatech.edu
*
**/

#ifndef FACE_TSS_COMMON_H
#define FACE_TSS_COMMON_H
#include <FACE/types.h>
#include <FACE/interface.h>
#include <FACE/sequence.h>
#include <FACE/string.h>
#include <FACE/fixed.h>
#include <FACE/Common.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

typedef FACE_STRING_TYPE FACE_TSS_CONNECTION_NAME_TYPE;
typedef FACE_unsigned_long FACE_TSS_MESSAGE_SIZE_TYPE;
typedef FACE_GUID_TYPE FACE_TSS_MESSAGE_GUID_TYPE;
typedef FACE_long_long FACE_TSS_UID_TYPE;
typedef FACE_TSS_UID_TYPE FACE_TSS_CONNECTION_ID_TYPE;
typedef FACE_TSS_UID_TYPE FACE_TSS_TRANSACTION_ID_TYPE;
#define FACE_TSS_CALLEE_PROVIDES_GUID ((FACE_GUID_TYPE)0)
#define FACE_TSS_TID_NOT_APPLICABLE ((FACE_TSS_TRANSACTION_ID_TYPE)-1)
#define FACE_TSS_CALLEE_PROVIDES_TID ((FACE_TSS_TRANSACTION_ID_TYPE)0)

/* Struct FACE_TSS_QoS_Element Begin */
typedef struct FACE_TSS_QoS_Element {
  FACE_STRING_TYPE keyname;
  FACE_STRING_TYPE value;
} FACE_TSS_QoS_Element;

static inline FACE_interface_return FACE_TSS_QoS_Element_init(FACE_TSS_QoS_Element *instance)
{
  if (FACE_STRING_NO_ERROR != 
      FACE_string_init_managed_bounded(&(instance->keyname), 
          FACE_STRING_TYPE_bound_value)) {
    return FACE_INTERFACE_INSUFFICIENT_MEMORY;
  }
  if (FACE_STRING_NO_ERROR != 
      FACE_string_init_managed_bounded(&(instance->value), 
          FACE_STRING_TYPE_bound_value)) {
    return FACE_INTERFACE_INSUFFICIENT_MEMORY;
  }
  return FACE_INTERFACE_NO_ERROR;
}
/* Struct FACE_TSS_QoS_Element End */
typedef FACE_sequence FACE_TSS_QoS_EVENT_TYPE;
#define FACE_TSS_QoS_EVENT_TYPE_bound_value FACE_SEQUENCE_UNBOUNDED_SENTINEL

#define FACE_TSS_QoS_EVENT_TYPE_init_managed_unbounded(_seq) \
  FACE_sequence_init_managed_unbounded((_seq), sizeof(FACE_TSS_QoS_Element))
  
#define FACE_TSS_QoS_EVENT_TYPE_init_managed_bounded(_seq, _bound) \
  FACE_sequence_init_managed_bounded((_seq), sizeof(FACE_TSS_QoS_Element), (_bound))
  
#define FACE_TSS_QoS_EVENT_TYPE_init_managed_copy(_seq, _src) \
  FACE_sequence_init_managed_copy((_seq), (_src))
  
#define FACE_TSS_QoS_EVENT_TYPE_init_managed_data(_seq, _arr, _length) \
  FACE_sequence_init_managed_data((_seq), (_arr), sizeof(FACE_TSS_QoS_Element), (_length))
  
#define FACE_TSS_QoS_EVENT_TYPE_init_unmanaged(_seq, _src, _length, _bound) \
  FACE_sequence_init_unmanaged( \
    (_seq), (_src), sizeof(FACE_TSS_QoS_Element), (_length), (_bound))
    
#define FACE_TSS_QoS_EVENT_TYPE_free(_seq) \
  FACE_sequence_free((_seq))
  
#define FACE_TSS_QoS_EVENT_TYPE_clear(_seq) \
  FACE_sequence_clear((_seq))
  
#define FACE_TSS_QoS_EVENT_TYPE_append(_seq, _src) \
  FACE_sequence_append((_seq), (_src))
  
#define FACE_TSS_QoS_EVENT_TYPE_at(_seq, _index) \
  (FACE_TSS_QoS_Element *) FACE_sequence_at((_seq), (_index))
  
#define FACE_TSS_QoS_EVENT_TYPE_buffer(_seq) \
  (FACE_TSS_QoS_Element *) FACE_sequence_buffer((_seq))
  
#define FACE_TSS_QoS_EVENT_TYPE_length(_seq, _length) \
  FACE_sequence_length((_seq), (_length))
  
#define FACE_TSS_QoS_EVENT_TYPE_capacity(_seq, _capacity) \
  FACE_sequence_capacity((_seq), (_capacity))
  
#define FACE_TSS_QoS_EVENT_TYPE_bound(_seq, _bound) \
  FACE_sequence_bound((_seq), (_bound))
  
#define FACE_TSS_QoS_EVENT_TYPE_is_managed(_seq, _is_managed) \
  FACE_sequence_is_managed((_seq), (_is_managed))
  
#define FACE_TSS_QoS_EVENT_TYPE_is_bounded(_seq, _is_bounded) \
  FACE_sequence_is_bounded((_seq), (_is_bounded))
  
#define FACE_TSS_QoS_EVENT_TYPE_is_valid(_seq, _is_valid) \
  FACE_sequence_is_valid((_seq), (_is_valid))
  

/* Struct FACE_TSS_HEADER_TYPE Begin */
typedef struct FACE_TSS_HEADER_TYPE {
  FACE_TSS_UID_TYPE instance_uid;
  FACE_TSS_UID_TYPE source_uid;
  FACE_SYSTEM_TIME_TYPE timestamp;
} FACE_TSS_HEADER_TYPE;

static inline FACE_interface_return FACE_TSS_HEADER_TYPE_init(FACE_TSS_HEADER_TYPE *instance)
{
  return FACE_INTERFACE_NO_ERROR;
}
/* Struct FACE_TSS_HEADER_TYPE End */
typedef FACE_unsigned_long FACE_TSS_BYTE_SIZE_TYPE;

/* Struct FACE_TSS_DATA_BUFFER_TYPE Begin */
typedef struct FACE_TSS_DATA_BUFFER_TYPE {
  FACE_SYSTEM_ADDRESS_TYPE buffer_address;
  FACE_TSS_BYTE_SIZE_TYPE buffer_capacity;
} FACE_TSS_DATA_BUFFER_TYPE;

static inline FACE_interface_return FACE_TSS_DATA_BUFFER_TYPE_init(FACE_TSS_DATA_BUFFER_TYPE *instance)
{
  return FACE_INTERFACE_NO_ERROR;
}
/* Struct FACE_TSS_DATA_BUFFER_TYPE End */

/* Struct FACE_TSS_MESSAGE_TYPE Begin */
typedef struct FACE_TSS_MESSAGE_TYPE {
  FACE_TSS_MESSAGE_GUID_TYPE message_guid;
  FACE_TSS_DATA_BUFFER_TYPE buffer;
} FACE_TSS_MESSAGE_TYPE;

static inline FACE_interface_return FACE_TSS_MESSAGE_TYPE_init(FACE_TSS_MESSAGE_TYPE *instance)
{
  enum FACE_interface_return ret_val = FACE_INTERFACE_NO_ERROR;
  
  ret_val = FACE_TSS_DATA_BUFFER_TYPE_init(&(instance->buffer));
  if (ret_val != FACE_INTERFACE_NO_ERROR) {
    return ret_val;
  }
  return FACE_INTERFACE_NO_ERROR;
}
/* Struct FACE_TSS_MESSAGE_TYPE End */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // FACE_TSS_COMMON_H
