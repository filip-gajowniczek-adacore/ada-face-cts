/** 
* Note:  This file is was generated by the GTRI IDL Compiler.
* This file should not be edited directly, if errors are found,
* please contact the individual listed below.
* 
* Developer:  Marcus Quettan
* Email: marcus.quettan@gtri.gatech.edu
*
**/

#ifndef FACE_DM_UOPMODELNAME_T1_H
#define FACE_DM_UOPMODELNAME_T1_H
#include <FACE/types.h>
#include <FACE/interface.h>
#include <FACE/sequence.h>
#include <FACE/string.h>
#include <FACE/fixed.h>
#include <FACE/DM/DataModelName/M2.h>
#include <FACE/DM/DataModelName/M1.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

typedef FACE_sequence FACE_DM_UoPModelName_T_T1_Seq_M2;
#define FACE_DM_UoPModelName_T_T1_Seq_M2_bound_value FACE_SEQUENCE_UNBOUNDED_SENTINEL

#define FACE_DM_UoPModelName_T_T1_Seq_M2_init_managed_unbounded(_seq) \
  FACE_sequence_init_managed_unbounded((_seq), sizeof(FACE_DM_DataModelName_M2))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_init_managed_bounded(_seq, _bound) \
  FACE_sequence_init_managed_bounded((_seq), sizeof(FACE_DM_DataModelName_M2), (_bound))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_init_managed_copy(_seq, _src) \
  FACE_sequence_init_managed_copy((_seq), (_src))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_init_managed_data(_seq, _arr, _length) \
  FACE_sequence_init_managed_data((_seq), (_arr), sizeof(FACE_DM_DataModelName_M2), (_length))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_init_unmanaged(_seq, _src, _length, _bound) \
  FACE_sequence_init_unmanaged( \
    (_seq), (_src), sizeof(FACE_DM_DataModelName_M2), (_length), (_bound))
    
#define FACE_DM_UoPModelName_T_T1_Seq_M2_free(_seq) \
  FACE_sequence_free((_seq))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_clear(_seq) \
  FACE_sequence_clear((_seq))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_append(_seq, _src) \
  FACE_sequence_append((_seq), (_src))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_at(_seq, _index) \
  (FACE_DM_DataModelName_M2 *) FACE_sequence_at((_seq), (_index))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_buffer(_seq) \
  (FACE_DM_DataModelName_M2 *) FACE_sequence_buffer((_seq))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_length(_seq, _length) \
  FACE_sequence_length((_seq), (_length))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_capacity(_seq, _capacity) \
  FACE_sequence_capacity((_seq), (_capacity))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_bound(_seq, _bound) \
  FACE_sequence_bound((_seq), (_bound))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_is_managed(_seq, _is_managed) \
  FACE_sequence_is_managed((_seq), (_is_managed))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_is_bounded(_seq, _is_bounded) \
  FACE_sequence_is_bounded((_seq), (_is_bounded))
  
#define FACE_DM_UoPModelName_T_T1_Seq_M2_is_valid(_seq, _is_valid) \
  FACE_sequence_is_valid((_seq), (_is_valid))
  

/* Struct FACE_DM_UoPModelName_T_T1_T1 Begin */
typedef struct FACE_DM_UoPModelName_T_T1_T1 {
  FACE_DM_UoPModelName_T_T1_Seq_M2 pobs3;
  FACE_DM_DataModelName_M1 pobs1;
} FACE_DM_UoPModelName_T_T1_T1;

static inline FACE_interface_return FACE_DM_UoPModelName_T_T1_T1_init(FACE_DM_UoPModelName_T_T1_T1 *instance)
{
  enum FACE_interface_return ret_val = FACE_INTERFACE_NO_ERROR;
  
  if (FACE_SEQUENCE_NO_ERROR != 
      FACE_DM_UoPModelName_T_T1_Seq_M2_init_managed_bounded(&(instance->pobs3), 
          FACE_DM_UoPModelName_T_T1_Seq_M2_bound_value)) {
    return FACE_INTERFACE_INSUFFICIENT_MEMORY;
  }
  ret_val = FACE_DM_DataModelName_M1_init(&(instance->pobs1));
  if (ret_val != FACE_INTERFACE_NO_ERROR) {
    return ret_val;
  }
  return FACE_INTERFACE_NO_ERROR;
}
/* Struct FACE_DM_UoPModelName_T_T1_T1 End */
typedef FACE_DM_UoPModelName_T_T1_T1 FACE_DM_UoPModelName_T1;

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // FACE_DM_UOPMODELNAME_T1_H
